plugins {
  id 'java'
  id 'war'
  id 'org.springframework.boot' version '3.5.3'
  id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.gitbaby'
version = '0.0.1-SNAPSHOT'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }
}

repositories {
  mavenCentral()
}

ext {
  querydslVersion = "5.1.0"
}

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
  developmentOnly 'org.springframework.boot:spring-boot-devtools' // 디버그모드에서만 실행
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'

//  compileOnly 'org.projectlombok:lombok'
  implementation 'org.projectlombok:lombok'
  testImplementation 'org.projectlombok:lombok'
  annotationProcessor 'org.projectlombok:lombok'
  testAnnotationProcessor 'org.projectlombok:lombok'


  runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'

  testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

  implementation 'org.thymeleaf.extras:thymeleaf-extras-java8time:3.0.4.RELEASE'

  implementation 'org.springframework.boot:spring-boot-starter-log4j2:3.5.3'

  // jpa
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.5.3'

  // QueryDSL - Jakarta 버전 (Spring Boot 3.x 대응)
  implementation "com.querydsl:querydsl-jpa:5.1.0:jakarta"
  annotationProcessor "com.querydsl:querydsl-apt:5.1.0:jakarta"

  // Jakarta 어노테이션 API (Q클래스 생성 시 필요)
  annotationProcessor 'jakarta.persistence:jakarta.persistence-api:3.1.0'
}

configurations {
  all {
    exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
  }
  compileOnly {
    extendsFrom annotationProcessor
  }

}

tasks.named('test') {
  useJUnitPlatform()
}



def generated = layout.buildDirectory.dir("generated/querydsl").get().asFile;

sourceSets {
  main {
    java {
      srcDirs += [generated]
    }
  }
}

tasks.withType(JavaCompile) {
  options.getGeneratedSourceOutputDirectory().set(generated)
}